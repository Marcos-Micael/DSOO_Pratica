/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.marcos.exposicao.view;

import com.marcos.exposicao.controller.ArtistaController;
import com.marcos.exposicao.controller.PinturaController;
import com.marcos.exposicao.dao.ExceptionDAO;
import com.marcos.exposicao.model.Artista;
import com.marcos.exposicao.model.Pintura;
import java.sql.Date;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 202312030002
 */
public class JanelaCadastroObraPintura extends javax.swing.JInternalFrame {

    private int idPinturaSelecionada;
    private int idArtistaSelecionado;

    /**
     * Creates new form JanelaCadastroObraPintura
     */
    public JanelaCadastroObraPintura() {
        initComponents();
        carregarComboArtista();
        carregarTabela();
        idPinturaSelecionada = 0;
        idArtistaSelecionado = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPintura = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        txtDataAqui = new javax.swing.JTextField();
        txtDimensoes = new javax.swing.JTextField();
        txtTipoTinta = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbArtista = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setText("Cadastro Obra Pintura");
        jPanel1.add(jLabel1);

        tblPintura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Obra", "ID Artista", "Titulo", "Data Aquisição", "Dimensões", "Tipo Tinta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPintura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPinturaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPintura);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Artista:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Dimensões:");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Tipo de Tinta:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Data de Aquisição:");

        btnSalvar.setText("SALVAR");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnLimpar.setText("LIMPAR");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnExcluir.setText("EXCLUIR");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Titulo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExcluir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtTitulo, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDataAqui, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbArtista, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDimensoes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtTipoTinta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(107, 107, 107))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataAqui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(txtDimensoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTipoTinta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnLimpar)
                    .addComponent(btnExcluir))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (idPinturaSelecionada == 0) {
            cadastrarPintura();
        } else {
            atualizarPintura();
        }
        carregarTabela();
        limparCampos();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        excluirPintura();
        carregarTabela();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void tblPinturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPinturaMouseClicked
        if (evt.getClickCount() == 2) {
            DefaultTableModel modeloTabela = (DefaultTableModel) tblPintura.getModel();
            int linhaSelecionada = tblPintura.getSelectedRow();

            idPinturaSelecionada = (Integer) modeloTabela.getValueAt(linhaSelecionada, 0);

            String titulo = (String) modeloTabela.getValueAt(linhaSelecionada, 2);
            String dimensoes = (String) modeloTabela.getValueAt(linhaSelecionada, 3);
            String dataaqui = (String) modeloTabela.getValueAt(linhaSelecionada, 4);
            String tinta = (String) modeloTabela.getValueAt(linhaSelecionada, 5);
            
            txtTitulo.setText(titulo);
            txtDimensoes.setText(dimensoes);
            txtDataAqui.setText(dataaqui);
            txtTipoTinta.setText(tinta);
        }
    }//GEN-LAST:event_tblPinturaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<Artista> cmbArtista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPintura;
    private javax.swing.JTextField txtDataAqui;
    private javax.swing.JTextField txtDimensoes;
    private javax.swing.JTextField txtTipoTinta;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables

    public void cadastrarPintura() {
        PinturaController pinturaController = new PinturaController();
        String titulo = txtTitulo.getText();
        String dimensoes = txtDimensoes.getText();
        String Data = txtDataAqui.getText();
        String tipoTinta = txtTipoTinta.getText();
        Artista a = (Artista) cmbArtista.getSelectedItem();
        int idArtista = a.getIdArtistas();
        boolean cadastrou;

        try {
            cadastrou = pinturaController.cadastrarPintura(titulo, dimensoes, Data, tipoTinta, idArtista);
            if (cadastrou) {
                JOptionPane.showMessageDialog(this, "Cadastro Realizado com Sucesso");
            } else {
                JOptionPane.showMessageDialog(this, "Os campos não foram preenchidos corretamente");
            }
        } catch (ExceptionDAO e) {
            JOptionPane.showMessageDialog(this, "Erro:" + e);
        }
    }

    public void limparCampos() {
        txtDimensoes.setText("");
        txtTipoTinta.setText("");
        txtTitulo.setText("");
        txtDataAqui.setText("");
    }

    private void carregarComboArtista() {
        try {
            ArtistaController artistaController = new ArtistaController();
            ArrayList<Artista> artistas = artistaController.consultarArtista();

            for (Artista artista : artistas) {
                cmbArtista.addItem(artista);
            }
        } catch (ExceptionDAO e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e);
        }

    }

    public void carregarTabela() {
        PinturaController pinturaController = new PinturaController();
        ArrayList<Pintura> pinturas = null;

        try {
            DefaultTableModel modeloTabela = (DefaultTableModel) tblPintura.getModel();
            modeloTabela.setRowCount(0);
            pinturas = pinturaController.consultarPintura();

            if (pinturas != null) {
                for (Pintura pinturaAtual : pinturas) {
                    modeloTabela.addRow(new Object[]{
                        pinturaAtual.getIdObra(),
                        pinturaAtual.getIdArtista(),
                        pinturaAtual.getTitulo(),
                        pinturaAtual.getDataAquisicao(),
                        pinturaAtual.getDimensoes(),
                        pinturaAtual.getTipoTinta()
                    });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar Tabela" + e);
        }
    }

    public void excluirPintura() {
        if (tblPintura.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Não há Pintura selecionada");
            return;
        }

        DefaultTableModel modeloTabela = (DefaultTableModel) tblPintura.getModel();
        PinturaController pinturaController = new PinturaController();

        int linhaSelecionada = tblPintura.getSelectedRow();

        int idPintura = (Integer) modeloTabela.getValueAt(linhaSelecionada, 0);
        String nome = (String) modeloTabela.getValueAt(linhaSelecionada, 2);

        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir  Pintura " + nome + " ?");

        if (confirma == 0) {
            try {
                pinturaController.excluirPintura(idPintura);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "ERRO:" + e);
            }
        }
    }

    public void atualizarPintura() {
        String titulo = txtTitulo.getText();
        String dimensoes = txtDimensoes.getText();
        String Data = txtDataAqui.getText();
        String tipoTinta = txtTipoTinta.getText();
        boolean editou;

        int confirmar = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja atualizar essa Pintura");

        if (confirmar == 0) {
            try {
                PinturaController pinturaController = new PinturaController();
                editou = pinturaController.atualizarPintura(idPinturaSelecionada, titulo, dimensoes, Data, tipoTinta);

                if (editou) {
                    JOptionPane.showMessageDialog(this, "pintura atualizada com sucesso!!");
                    idPinturaSelecionada = 0;
                    limparCampos();
                    carregarTabela();
                } else{
                    JOptionPane.showMessageDialog(this, "Os campos não foram preechidos coretamente");
                }
            } catch(ExceptionDAO e){
                JOptionPane.showMessageDialog(this, "Erro ao atulizar Pintura: " + e);
            }
        } else if(confirmar == 2){
            idPinturaSelecionada = 0;
            limparCampos();
        }

    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.exposicao_artistica.view;

import com.mycompany.exposicao_artistica.controller.ArtistaController;
import com.mycompany.exposicao_artistica.dao.ExceptionDAO;
import com.mycompany.exposicao_artistica.model.Artista;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author marco
 */
public class JanelaCadastroArtista extends javax.swing.JInternalFrame {

    /**
     * Creates new form JanelaCadastroArtista
     */
    private int idArtistaSelecionado;

    public JanelaCadastroArtista() {
        initComponents();
        carregarTabela();
        idArtistaSelecionado = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtNacionalidade = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArtista = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastrar Artista");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Nome:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Nacionalidade:");

        txtNome.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        txtNacionalidade.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        btnSalvar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnLimpar.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        tblArtista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Nacionalidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArtista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArtistaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblArtista);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel4.setText("Cadastrar Artista");
        jPanel2.add(jLabel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNacionalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnLimpar)
                    .addComponent(btnExcluir))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        excluirArtista();
        carregarTabela();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (idArtistaSelecionado == 0) {
            cadastrarArtista();
        } else {
            atualizarArtista();
        }
        carregarTabela();
        limparCampos();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void tblArtistaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArtistaMouseClicked
        if(evt.getClickCount() == 2){
            DefaultTableModel modeloTabela = (DefaultTableModel) tblArtista.getModel();
            int linhaSelecionada = tblArtista.getSelectedRow();
            
            idArtistaSelecionado = (Integer) modeloTabela.getValueAt(linhaSelecionada, 0);
            
            String nome = (String) modeloTabela.getValueAt(linhaSelecionada, 1);
            String nacionalidade = (String) modeloTabela.getValueAt(linhaSelecionada, 2);
            
            txtNome.setText(nome);
            txtNacionalidade.setText(nacionalidade);
        }
    }//GEN-LAST:event_tblArtistaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblArtista;
    private javax.swing.JTextField txtNacionalidade;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

    public void limparCampos() {
        txtNome.setText("");
        txtNacionalidade.setText("");
    }

    public void cadastrarArtista() {
        ArtistaController artistaController = new ArtistaController();
        String nome = txtNome.getText();
        String nacionalidade = txtNacionalidade.getText();
        Boolean cadastrou;

        try {
            cadastrou = artistaController.cadastrarArtista(nome, nacionalidade);
            if (cadastrou) {
                JOptionPane.showMessageDialog(this, "Cadastro Realizado com Sucesso");
            } else {
                JOptionPane.showMessageDialog(this, "Os campos não foram preenchidos corretamente");
            }
        } catch (ExceptionDAO e) {
            JOptionPane.showMessageDialog(this, "Erro:" + e);
        }
    }

    public void carregarTabela() {
        ArtistaController artistaController = new ArtistaController();
        ArrayList<Artista> artistas = null;

        try {
            DefaultTableModel modeloTabela = (DefaultTableModel) tblArtista.getModel();
            modeloTabela.setRowCount(0);
            artistas = artistaController.consultarArtista();

            if (artistas != null) {
                for (Artista artistaAtual : artistas) {
                    modeloTabela.addRow(new Object[]{
                        artistaAtual.getIdArtistas(),
                        artistaAtual.getNome(),
                        artistaAtual.getNacionalidade()
                    });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar tabela:" + e);
        }
    }

    public void excluirArtista() {
        if (tblArtista.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Não há Artista selecionado");
            return;
        }

        DefaultTableModel modeloTabela = (DefaultTableModel) tblArtista.getModel();
        ArtistaController artistaController = new ArtistaController();

        int linhaSelecionada = tblArtista.getSelectedRow();

        int idArtista = (Integer) modeloTabela.getValueAt(linhaSelecionada, 0);
        String nome = (String) modeloTabela.getValueAt(linhaSelecionada, 1);

        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que eseja exluir o Artista " + nome + " ?");

        if (confirma == 0) {
            try {
                artistaController.excluirArtista(idArtista);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro:" + e);
            }
        }
    }

    public void atualizarArtista() {
        String nome = txtNome.getText();
        String nacionalidade = txtNacionalidade.getText();
        boolean editou;

        int confirmar = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja atualizar este artista");

        if (confirmar == 0) {
            try {
                ArtistaController artistaController = new ArtistaController();
                editou = artistaController.atulaizarArtista(idArtistaSelecionado, nome, nacionalidade);

                if (editou) {
                    JOptionPane.showMessageDialog(this, "Artista atulaizado com sucesso");
                    idArtistaSelecionado = 0;
                    limparCampos();
                    carregarTabela();
                } else {
                    JOptionPane.showMessageDialog(this, "Os campos não foram preenchidos corretamente");
                }
            } catch (ExceptionDAO e) {
                JOptionPane.showMessageDialog(this, "Erro ao atulizar Atista: " + e);
            }
        } else if (confirmar == 2) {
            idArtistaSelecionado = 0;
            limparCampos();
        }

    }

}
